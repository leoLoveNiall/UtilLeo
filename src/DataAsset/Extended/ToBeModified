package com.test.apply.arr;

import java.util.Iterator;

@SuppressWarnings("unused")
public abstract class Array<E> implements Iterable<E> {
    public abstract E get(int pos);
    public abstract void set(int pos, E e);
    public abstract int len();

    public static Array<Byte> of(byte[] a) {
        return new Array<>() {
            @Override
            public Byte get(int pos) {
                return a[pos];
            }

            @Override
            public void set(int pos, Byte e) {
                a[pos] = e;
            }

            @Override
            public int len() {
                return a.length;
            }

            @Override
            public Iterator<Byte> iterator() {
                return new Iterator<>() {
                    private int pos = 0;

                    @Override
                    public boolean hasNext() {
                        return pos < len();
                    }

                    @Override
                    public Byte next() {
                        return a[pos++];
                    }
                };
            }
        };
    }

    public static Array<Character> of(char[] a) {
        return new Array<>() {
            @Override
            public Character get(int pos) {
                return a[pos];
            }

            @Override
            public void set(int pos, Character e) {
                a[pos] = e;
            }

            @Override
            public int len() {
                return a.length;
            }

            @Override
            public Iterator<Character> iterator() {
                return new Iterator<>() {
                    private int pos = 0;

                    @Override
                    public boolean hasNext() {
                        return pos < len();
                    }

                    @Override
                    public Character next() {
                        return a[pos++];
                    }
                };
            }
        };
    }

    public static Array<Boolean> of(boolean[] a) {
        return new Array<>() {
            @Override
            public Boolean get(int pos) {
                return a[pos];
            }

            @Override
            public void set(int pos, Boolean e) {
                a[pos] = e;
            }

            @Override
            public int len() {
                return a.length;
            }

            @Override
            public Iterator<Boolean> iterator() {
                return new Iterator<>() {
                    private int pos = 0;

                    @Override
                    public boolean hasNext() {
                        return pos < len();
                    }

                    @Override
                    public Boolean next() {
                        return a[pos++];
                    }
                };
            }
        };
    }

    public static Array<Short> of(short[] a) {
        return new Array<>() {
            @Override
            public Short get(int pos) {
                return a[pos];
            }

            @Override
            public void set(int pos, Short e) {
                a[pos] = e;
            }

            @Override
            public int len() {
                return a.length;
            }

            @Override
            public Iterator<Short> iterator() {
                return new Iterator<>() {
                    private int pos = 0;

                    @Override
                    public boolean hasNext() {
                        return pos < len();
                    }

                    @Override
                    public Short next() {
                        return a[pos++];
                    }
                };
            }
        };
    }

    public static Array<Integer> of(int[] a) {
        return new Array<>() {
            @Override
            public Integer get(int pos) {
                return a[pos];
            }

            @Override
            public void set(int pos, Integer e) {
                a[pos] = e;
            }

            @Override
            public int len() {
                return a.length;
            }

            @Override
            public Iterator<Integer> iterator() {
                return new Iterator<>() {
                    private int pos = 0;

                    @Override
                    public boolean hasNext() {
                        return pos < len();
                    }

                    @Override
                    public Integer next() {
                        return a[pos++];
                    }
                };
            }
        };
    }

    public static Array<Long> of(long[] a) {
        return new Array<>() {
            @Override
            public Long get(int pos) {
                return a[pos];
            }

            @Override
            public void set(int pos, Long e) {
                a[pos] = e;
            }

            @Override
            public int len() {
                return a.length;
            }

            @Override
            public Iterator<Long> iterator() {
                return new Iterator<>() {
                    private int pos = 0;

                    @Override
                    public boolean hasNext() {
                        return pos < len();
                    }

                    @Override
                    public Long next() {
                        return a[pos++];
                    }
                };
            }
        };
    }

    public static Array<Float> of(float[] a) {
        return new Array<>() {
            @Override
            public Float get(int pos) {
                return a[pos];
            }

            @Override
            public void set(int pos, Float e) {
                a[pos] = e;
            }

            @Override
            public int len() {
                return a.length;
            }

            @Override
            public Iterator<Float> iterator() {
                return new Iterator<>() {
                    private int pos = 0;

                    @Override
                    public boolean hasNext() {
                        return pos < len();
                    }

                    @Override
                    public Float next() {
                        return a[pos++];
                    }
                };
            }
        };
    }

    public static Array<Double> of(double[] a) {
        return new Array<>() {
            @Override
            public Double get(int pos) {
                return a[pos];
            }

            @Override
            public void set(int pos, Double e) {
                a[pos] = e;
            }

            @Override
            public int len() {
                return a.length;
            }

            @Override
            public Iterator<Double> iterator() {
                return new Iterator<>() {
                    private int pos = 0;

                    @Override
                    public boolean hasNext() {
                        return pos < len();
                    }

                    @Override
                    public Double next() {
                        return a[pos++];
                    }
                };
            }
        };
    }
}